# Broadway

```elixir
Mix.install([
  {:redix, "~> 1.0"},
  {:broadway, "~> 0.6.0"},
  {:off_broadway_redis_stream, "~> 0.4.0"}
])
```

## Section

```elixir
defmodule RedisPrinterPipeline do
  use Broadway

  def start_link do
    redis_uri = URI.parse(System.fetch_env!("UPSTASH_REDIS_URL"))
    dbg(redis_uri)

    producer_opts = [
      redis_client_opts: [host: redis_uri.hostname],
      stream: "orders",
      group: "processor-group",
      consumer_name: hostname()
    ]

    Broadway.start_link(__MODULE__,
      name: __MODULE__,
      producer: [
        module: {OffBroadway.Redis.Producer, producer_opts},
        concurrency: 1
      ],
      processors: [
        default: [concurrency: 2]
      ]
    )
  end

  # The only callback you need to process messages.
  @impl true
  def handle_message(:default, message, _context) do
    IO.inspect(message, label: "Message in processor #{inspect(self())}")
    message
  end
end
```
