# GenStage

```elixir
Mix.install([
  {:gen_stage, "~> 1.0"},
  {:kino, "~> 0.9.1"},
  {:phoenix_html, "~> 3.3"},
  {:req, "~> 0.3.5"},
  {:floki, "~> 0.34.1"}
])

defmodule Helpers do
  def process_name(pid) when is_pid(pid) do
    case Process.info(pid, :registered_name) do
      {:registered_name, atom} when is_atom(atom) -> atom
      _other -> pid
    end
  end

  def process_name([:alias | ref]) when is_reference(ref) do
    :alias
  end

  def process_name(ref) when is_reference(ref) do
    :ref
  end
end

defmodule GenStageVisualizer do
  use GenServer

  require Logger

  def start_link(opts) when is_list(opts) do
    stages = Keyword.fetch!(opts, :stages)
    GenServer.start_link(__MODULE__, stages)
  end

  def render(server) do
    GenServer.call(server, :render)
  end

  defstruct [:stages, messages: []]

  @impl true
  def init(stages) do
    :erlang.trace(:all, true, [:send])
    {:ok, %__MODULE__{stages: MapSet.new(stages)}}
  end

  @impl true
  def handle_info({:trace, from, :send, msg, to}, %__MODULE__{} = state)
      when node(from) == node() and node(to) == node() and not is_port(from) and not is_port(to) do
    if from in state.stages and to in state.stages do
      from_name = Helpers.process_name(from)
      to_name = Helpers.process_name(to)
      {:noreply, update_in(state.messages, &(&1 ++ [{from_name, to_name, msg}]))}
    else
      {:noreply, state}
    end
  end

  def handle_info(_msg, %__MODULE__{} = state) do
    {:noreply, state}
  end

  @impl true
  def handle_call(:render, _from, state) do
    if state.messages == [] do
      IO.puts("no messages, something went wrong")
      exit(:no_messages)
    end

    actors =
      state.messages
      |> Enum.flat_map(fn {from, to, _msg} -> [from, to] end)
      |> Enum.uniq()
      |> Enum.sort()
      |> Enum.map_join("\n", &~s(  participant #{format_participant(&1)}))

    messages =
      Enum.map_join(state.messages, "\n", fn {from, to, msg} ->
        ~s(#{format_participant(from)} ->> #{format_participant(to)}: #{format_message(msg)})
      end)

    mermaid =
      Kino.Mermaid.new("""
      %%{init: {'theme':'forest'}}%%

      sequenceDiagram
        #{actors}
        #{messages}
      """)

    {:reply, mermaid, state}
  end

  ## Helpers

  defp format_participant(atom) when is_atom(atom), do: inspect(atom)
  defp format_participant(pid) when is_pid(pid), do: "PID"

  defp format_message({:"$gen_producer", _from, {:subscribe, _sub, _opts}}), do: "subscribe"
  defp format_message({:"$gen_producer", _from, {:ask, demand}}), do: "ask(#{demand})"
  defp format_message({:"$gen_consumer", _sub, events}), do: "#{length(events)} events"
  defp format_message(other), do: inspect(other)
end
```

## Producers and Consumers

A producer that emits consecutive integers:

```elixir
defmodule NumbersProducer do
  use GenStage

  def start_link(opts) do
    start_at = Keyword.fetch!(opts, :start_at)
    GenStage.start_link(__MODULE__, start_at, name: opts[:name] || __MODULE__)
  end

  @impl true
  def init(counter) do
    {:producer, counter}
  end

  @impl true
  def handle_demand(demand, counter) when demand > 0 do
    # If the counter is 3 and we ask for 2 items, we will
    # emit the items 3 and 4, and set the state to 5.
    events = Enum.to_list(counter..(counter + demand - 1))
    {:noreply, events, counter + demand}
  end
end
```

A consumer that prints the events it consumes:

```elixir
# A consumer that prints the events it consumes. 
defmodule EventsPrinter do
  use GenStage

  def start_link(opts) do
    name = Keyword.get(opts, :name, __MODULE__)
    GenStage.start_link(__MODULE__, name, name: name)
  end

  @impl true
  def init(name) do
    {:consumer, %{name: name}}
  end

  @impl true
  def handle_events(events, {consumer, _ref} = _from, state) do
    # Artificial delay.
    Process.sleep(500)

    # Inspect the events.
    IO.inspect(events, label: "Events from #{inspect(consumer)} in #{inspect(state.name)}")

    # We are a consumer, so we would never emit items.
    {:noreply, [], state}
  end
end
```

Visualizing message flows:

```elixir
{:ok, consumer} = Kino.start_child({EventsPrinter, name: FirstPrinter})
{:ok, producer} = Kino.start_child({NumbersProducer, start_at: 489, name: FirstProducer})

{:ok, visualizer} = Kino.start_child({GenStageVisualizer, stages: [producer, consumer]})

# Subscribe the consumer to the producer.
GenStage.sync_subscribe(consumer, to: producer, min_demand: 2, max_demand: 5)

# Let this run for a couple of seconds.
Process.sleep(2000)

GenStage.stop(producer)

GenStageVisualizer.render(visualizer)
```

Who knows what _**backpressure**_ is?

<!-- livebook:{"break_markdown":true} -->

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

#### Demand-driven Data Flow

```mermaid
%%{init: {'theme':'forest'}}%%
graph LR;
  p([Producer])
  c([Consumer])

  p --Send events as requested --> c
  c --Ask for data by sending demand--> p
```

## Multiple Producers and Consumers

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
%%{init: {'theme':'forest'}}%%
flowchart TD;
  producer1[Producer]
  producer2[Producer]
  consumer1[Consumer]
  consumer2[Consumer]
  consumer3[Consumer]

  producer1 --> consumer1
  producer1 --> consumer2
  producer1 --> consumer3
  producer2 --> consumer1
  producer2 --> consumer2
  producer2 --> consumer3
```

```elixir
{:ok, consumer1} = Kino.start_child({EventsPrinter, name: Printer1})
{:ok, consumer2} = Kino.start_child({EventsPrinter, name: Printer2})

{:ok, producer1} = Kino.start_child({NumbersProducer, start_at: 0, name: StartAt0Producer})
{:ok, producer2} = Kino.start_child({NumbersProducer, start_at: 1000, name: StartAt1000Producer})

{:ok, visualizer} =
  Kino.start_child({GenStageVisualizer, stages: [producer1, producer2, consumer1, consumer2]})

# Subscribe the consumers to the producers.
{:ok, _} = GenStage.sync_subscribe(consumer1, to: producer1, min_demand: 2, max_demand: 8)
{:ok, _} = GenStage.sync_subscribe(consumer1, to: producer2, min_demand: 3, max_demand: 8)
{:ok, _} = GenStage.sync_subscribe(consumer2, to: producer1, min_demand: 0, max_demand: 1)
{:ok, _} = GenStage.sync_subscribe(consumer2, to: producer2, min_demand: 2, max_demand: 8)

Process.sleep(1000)

GenStage.stop(producer1)
GenStage.stop(producer2)

GenStageVisualizer.render(visualizer)
```

## Producer-consumers In Between

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
%%{init: {'theme':'forest'}}%%
flowchart TD;
  p1[Producer]
  p2[Producer]
  pc1[Producer-consumer]
  opc1[Other producer-consumer]
  opc2[Other producer-consumer]
  fpc1[Yet one more producer-consumer]
  consumer[Consumer]

  p1 & p2 --> pc1 --> opc1 & opc2 --> fpc1 --> consumer
```

```elixir
defmodule NumberAdjuster do
  use GenStage

  def start_link(options) do
    GenStage.start_link(__MODULE__, [], Keyword.take(options, [:name]))
  end

  @impl true
  def init([]) do
    {:producer_consumer, :no_state}
  end

  @impl true
  def handle_events(events, _from, state) do
    new_events =
      Enum.map(events, fn number ->
        adjustment = number * :rand.uniform() / 10
        Enum.random([number + adjustment, number - adjustment])
      end)

    {:noreply, new_events, state}
  end
end
```

```elixir
{:ok, consumer} = Kino.start_child({EventsPrinter, name: FinalConsumer})
{:ok, producer_consumer} = Kino.start_child({NumberAdjuster, name: MidStage})
{:ok, producer} = Kino.start_child({NumbersProducer, start_at: 489, name: InitialProducer})

{:ok, visualizer} =
  Kino.start_child({GenStageVisualizer, stages: [producer, producer_consumer, consumer]})

# Subscribe the consumer to the producer.
GenStage.sync_subscribe(consumer, to: producer_consumer, min_demand: 2, max_demand: 5)
GenStage.sync_subscribe(producer_consumer, to: producer, min_demand: 2, max_demand: 5)

# Let this run for a couple of seconds.
Process.sleep(2000)

GenStage.stop(consumer)
GenStage.stop(producer)

GenStageVisualizer.render(visualizer)
```

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

The demand-driven event flow applies to producer-consumers as well:

```mermaid
%%{init: {'theme':'forest'}}%%
graph LR;
  p([Producer])
  pc1([Producer-consumer 1])
  pc2([Producer-consumer 2])
  c([Consumer])

  p --events--> pc1 --events--> pc2 --events--> c
  c --demand--> pc2 --demand--> pc1 --demand--> p

```

<!-- livebook:{"branch_parent_index":0} -->

## Dispatchers

`GenStage.BroadcastDispatcher` sends the **same events** to all subscribed consumers.

```mermaid
%%{init: {'theme':'forest'}}%%
graph LR;
  p([Producer])
  c1([Consumer 1])
  c2([Consumer 2])
  c3([Consumer 3])

  p --event X--> c1 & c2 & c3
```

```elixir
defmodule PubSubProducer do
  use GenStage

  def start_link([] = _opts) do
    GenStage.start_link(__MODULE__, :no_args, name: __MODULE__)
  end

  @doc "Publishes messages on demand."
  def publish(message) do
    GenStage.call(__MODULE__, {:publish, message})
  end

  ## Callbacks

  @impl true
  def init(:no_args) do
    {:producer, :no_state, dispatcher: GenStage.BroadcastDispatcher}
  end

  @impl true
  def handle_call({:publish, message}, _from, state) do
    {:reply, :ok, [message], state}
  end

  @impl true
  def handle_demand(_demand, state) do
    {:noreply, [], state}
  end
end
```

```elixir
{:ok, consumer1} = Kino.start_child({EventsPrinter, name: PubSubPrinter1})
{:ok, consumer2} = Kino.start_child({EventsPrinter, name: PubSubPrinter2})
{:ok, consumer3} = Kino.start_child({EventsPrinter, name: PubSubPrinter3})

{:ok, pubsub} = Kino.start_child(PubSubProducer)

{:ok, visualizer} =
  Kino.start_child({GenStageVisualizer, stages: [pubsub, consumer1, consumer2, consumer3]})

# Subscribe the consumers to the producers.
GenStage.sync_subscribe(consumer1, to: pubsub, min_demand: 2, max_demand: 8)
GenStage.sync_subscribe(consumer2, to: pubsub, min_demand: 2, max_demand: 8)
GenStage.sync_subscribe(consumer3, to: pubsub, min_demand: 2, max_demand: 8)

# Publish some messages.
PubSubProducer.publish("hello")
PubSubProducer.publish("world")

Process.sleep(500)
Kino.terminate_child(pubsub)
Process.sleep(500)

GenStageVisualizer.render(visualizer)
```

Other dispatchers are available.

The *default* one is `GenStage.DemandDispatcher`, which dispatches to the consumer with the **most demand**, that is, the "hungriest" consumer.

### Partition Dispatcher

Another dispatcher is `GenStage.PartitionDispatcher`, which dispatches based on a configurable **partition**.

```mermaid
%%{init: {'theme':'forest'}}%%
graph LR
  p([Producer with partition dispatcher])

  subgraph consumers_odd[Consumers for odd]
    cons_odd1([Consumer])
    cons_odd2([Consumer])
  end

  subgraph consumers_even[Consumers for even]
    cons_even1([Consumer])
    cons_even2([Consumer])
  end
  
  p --"events for partition #quot;odd#quot;"--> consumers_odd
  p --"events for partition #quot;even#quot;"--> consumers_even
```

```elixir
defmodule TypesProducer do
  use GenStage

  def start_link([] = _options) do
    GenStage.start_link(__MODULE__, :no_args, name: __MODULE__)
  end

  ## Callbacks

  @impl true
  def init(:no_args) do
    dispatcher_opts = [
      partitions: [:binaries, :floats, :integers],
      hash: &hash/1
    ]

    {:producer, :no_state, dispatcher: {GenStage.PartitionDispatcher, dispatcher_opts}}
  end

  @impl true
  def handle_demand(demand, state) do
    stream =
      Stream.repeatedly(fn ->
        Enum.random([
          System.unique_integer(),
          :crypto.strong_rand_bytes(4),
          System.unique_integer() / 3.14
        ])
      end)

    {:noreply, Enum.take(stream, demand), state}
  end

  defp hash(string) when is_binary(string), do: {string, :binaries}
  defp hash(float) when is_float(float), do: {float, :floats}
  defp hash(int) when is_integer(int), do: {int, :integers}
end
```

```elixir
{:ok, binary_consumer} = Kino.start_child({EventsPrinter, name: BinaryPrinter})
{:ok, float_consumer} = Kino.start_child({EventsPrinter, name: FloatPrinter})
{:ok, integer_consumer} = Kino.start_child({EventsPrinter, name: IntegerPrinter})

{:ok, producer} = Kino.start_child(TypesProducer)

# Subscribe the consumers to the producers.
subscribe_opts = [to: producer, min_demand: 2, max_demand: 5]
GenStage.sync_subscribe(binary_consumer, [partition: :binaries] ++ subscribe_opts)
GenStage.sync_subscribe(float_consumer, [partition: :floats] ++ subscribe_opts)
GenStage.sync_subscribe(integer_consumer, [partition: :integers] ++ subscribe_opts)

Kino.terminate_child(producer)
```

<!-- livebook:{"branch_parent_index":0} -->

## Use Case: Rate-limited Web Scraper

```elixir
defmodule RateLimiter do
  use GenStage

  def start_link(opts) do
    GenStage.start_link(__MODULE__, opts)
  end

  defstruct events: [], emitted_in_interval: 0, max_in_interval: nil

  @impl true
  def init(opts) do
    :timer.send_interval(1000, self(), :reset_interval)
    state = %__MODULE__{max_in_interval: Keyword.fetch!(opts, :events_per_second)}
    {:producer_consumer, state}
  end

  @impl true
  def handle_events(events, _from, state) do
    state = update_in(state.events, &(&1 ++ events))
    {events_to_emit, state} = get_events_to_emit(state)
    {:noreply, events_to_emit, state}
  end

  @impl true
  def handle_info(:reset_interval, state) do
    state = %__MODULE__{state | emitted_in_interval: 0}
    {events_to_emit, state} = get_events_to_emit(state)
    {:noreply, events_to_emit, state}
  end

  defp get_events_to_emit(state) do
    case state.max_in_interval - state.emitted_in_interval do
      to_emit when to_emit > 0 ->
        {events, state} = get_and_update_in(state.events, &Enum.split(&1, to_emit))
        {events, update_in(state.emitted_in_interval, &(&1 + to_emit))}

      _ ->
        {[], state}
    end
  end
end
```

```elixir
defmodule CrashDataFetcher do
  use GenStage

  def start_link([] = _options) do
    GenStage.start_link(__MODULE__, :no_state)
  end

  @impl true
  def init(:no_state) do
    {:producer_consumer, :no_state}
  end

  @impl true
  def handle_events(events, _from, state) do
    events =
      Enum.flat_map(events, fn year ->
        response = Req.get!("http://www.planecrashinfo.com/#{year}/#{year}.htm")
        html_doc = Floki.parse_document!(response.body)

        {[header], table_rows} =
          html_doc
          |> Floki.find("table tr")
          |> Enum.map(fn {"tr", _attrs, data} -> Enum.map(data, &Floki.text/1) end)
          |> Enum.split(1)

        Enum.map(table_rows, fn row -> Map.new(Enum.zip(header, row)) end)
      end)

    {:noreply, events, state}
  end
end
```

```elixir
producer_spec = %{
  id: :years,
  start: {GenStage, :from_enumerable, [1920..2023, [on_cancel: :stop]]}
}

{:ok, years_producer} = Kino.start_child(producer_spec)
{:ok, rate_limiter} = Kino.start_child({RateLimiter, events_per_second: 3})
{:ok, fetcher} = Kino.start_child(CrashDataFetcher)
{:ok, events_printer} = Kino.start_child({EventsPrinter, name: CrashesPrinter})

GenStage.sync_subscribe(events_printer, to: fetcher, max_demand: 10)
GenStage.sync_subscribe(fetcher, to: rate_limiter, max_demand: 10)
GenStage.sync_subscribe(rate_limiter, to: years_producer, max_demand: 10, cancel: :transient)

Process.sleep(5_000)
Kino.terminate_child(events_printer)
```

GenStage's rate-limiting and backpressure use cases can be applied to so many other things, not just outgoing HTTP requests (see [this blog post](https://tech.forzafootball.com/blog/maximizing-http2-performance-with-genstage)).

```mermaid
%%{ init: { 'theme': 'forest' }}%%
flowchart TD
  p(["Producer that fetches push notifications from Cassandra"])
  apns((APNS servers))

  subgraph consumers[Consumers]
    c1([Consumer 1]) --> http2_conn1["HTTP/2 connection"]
    c2([Consumer 2]) --> http2_conn2["HTTP/2 connection"]
    c3([Consumer 3]) --> http2_conn3["HTTP/2 connection"]
  end

  p --Notifications--> c1 & c2 & c3
  http2_conn1 & http2_conn2 & http2_conn3 --"HTTP/2 requests"--> apns
```
